env USERS_DELAY_MS;
env PRODUCTS_DELAY_MS;
env ORDERS_DELAY_MS;

events {
    worker_connections 1024;
}

http {
    include       /usr/local/openresty/nginx/conf/mime.types;
    default_type  application/json;

    lua_shared_dict orders_cache 10m;

    server {
        listen 8081;
        
        set_by_lua_block $users_delay_ms {
            local delay = os.getenv("USERS_DELAY_MS")
            return delay
        }
        
        location / {
            root /usr/local/openresty/nginx/html/services/users;
            
            access_by_lua_block {
                if ngx.var.users_delay_ms then
                    ngx.sleep(tonumber(ngx.var.users_delay_ms) / 1000)
                end
            }
            
            try_files $uri $uri/ =404;
            add_header Content-Type application/json;
        }
    }

    server {
        listen 8082;
        
        set_by_lua_block $products_delay_ms {
            local delay = os.getenv("PRODUCTS_DELAY_MS")
            return delay
        }
        
        location / {
            root /usr/local/openresty/nginx/html/services/products;
            
            access_by_lua_block {
                if ngx.var.products_delay_ms then
                    ngx.sleep(tonumber(ngx.var.products_delay_ms) / 1000)
                end
            }
            
            try_files $uri $uri/ =404;
            add_header Content-Type application/json;
        }
    }

    server {
        listen 8083;
        
        set_by_lua_block $orders_delay_ms {
            local delay = os.getenv("ORDERS_DELAY_MS")
            return delay
        }
        
        location / {
            root /usr/local/openresty/nginx/html/services/orders;
            
            access_by_lua_block {
                if ngx.var.orders_delay_ms then
                    ngx.sleep(tonumber(ngx.var.orders_delay_ms) / 1000)
                end
            }
            
            try_files $uri $uri/ =404;
            add_header Content-Type application/json;
        }

        location /cached/ {
            content_by_lua_block {
                local cache = ngx.shared.orders_cache
                local uri = ngx.var.uri:gsub("/cached", "")
                local cache_key = uri

                local cached_data = cache:get(cache_key)
                
                if cached_data then
                    ngx.say(cached_data)
                    return
                end

                local res = ngx.location.capture("/proxy" .. uri)

                if res.status ~= 200 then
                    ngx.status = res.status
                    ngx.say('{"error": "Not found"}')
                    return
                end

                cache:set(cache_key, res.body, 3600)
                ngx.say(res.body)
            }
        }

        location /proxy/ {
            internal;
            proxy_pass http://localhost:8083/;
            proxy_set_header Host localhost;
        }
    }
} 